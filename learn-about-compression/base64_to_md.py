import base64
import zstandard as zstd
import io

# Prompt user for base64 string and output file name
base64_string = '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'
output_filename = input('Enter the output .md file name: ')

# Decode base64 to compressed bytes
compressed_bytes = base64.b64decode(base64_string)

# Decompress zstd to get original content
original_content = zstd.ZstdDecompressor().decompress(compressed_bytes)

with open(output_filename, 'wb') as f:
    f.write(original_content)

print(f'File written to {output_filename}') 